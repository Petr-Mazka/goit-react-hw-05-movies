{"version":3,"file":"static/js/564.7dfc7846.chunk.js","mappings":"mRAEaA,EAAaC,EAAAA,GAAAA,KAAH,wGAOVC,EAAQD,EAAAA,GAAAA,MAAH,2VAkBLE,EAASF,EAAAA,GAAAA,OAAH,oZ,SChBnB,EATkB,SAAC,GAAkB,IAAhBG,EAAe,EAAfA,SACjB,OACI,UAACJ,EAAD,CAAYI,SAAUA,EAAtB,WACI,SAACF,EAAD,CAAOG,KAAK,OAAOC,KAAK,aAAaC,YAAY,uBACjD,SAACJ,EAAD,CAAQE,KAAK,SAAb,sBAGX,E,UCQD,EAfmB,SAAC,GAAgB,IAAdG,EAAa,EAAbA,OAEZC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,wBACKF,EAAOG,KAAI,SAAAC,GAAK,OACb,yBACI,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAhD,SAA6DG,EAAMK,SAD9DL,EAAME,GADF,KAO5B,ECwBD,EAjCmB,WACf,OAA4BI,EAAAA,EAAAA,UAAS,IAArC,eAAOV,EAAP,KAAeW,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAaF,EAAaG,IAAI,eAEpCC,EAAAA,EAAAA,YAAU,WACV,GAAIF,EAAY,CACd,IAAMG,EAAW,mCAAG,gHAEOC,EAAAA,EAAAA,IAAeJ,GAFtB,gBAERK,EAFQ,EAERA,KACRT,EAAUS,EAAKC,SAHC,qJAAH,qDAQjBH,GACD,CACA,GAAE,CAACH,IAQJ,OACI,4BACI,SAAC,EAAD,CAAWnB,SARE,SAAA0B,GACrBA,EAAMC,iBAENT,EAAgB,CAAEC,WAAYO,EAAME,OAAOC,SAASV,WAAWW,OAChE,KAKS,SAAC,EAAD,CAAY1B,OAAQA,MAG/B,C,2MCnCK2B,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACoBC,IAAAA,IAAA,wCAA2CF,IAD/D,cACGG,EADH,yBAEIA,GAFJ,kEAKA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BzB,GAA5B,yFACoBuB,IAAAA,IAAA,mBAAsBvB,EAAtB,oBAAoCqB,IADxD,uBACKP,EADL,EACKA,KADL,kBAEI,CAAEA,KAAAA,IAFN,kEAKA,SAAeY,EAAtB,+CAAO,OAAP,oBAAO,WAA6B1B,GAA7B,yFACoBuB,IAAAA,IAAA,mBAAsBvB,EAAtB,4BAA4CqB,IADhE,uBACKP,EADL,EACKA,KADL,kBAEI,CAAEA,KAAAA,IAFN,kEAKA,SAAea,EAAtB,+CAAO,OAAP,oBAAO,WAAgC3B,GAAhC,yFACoBuB,IAAAA,IAAA,mBAAsBvB,EAAtB,4BAA4CqB,IADhE,uBACKP,EADL,EACKA,KADL,kBAEI,CAAEA,KAAAA,IAFN,kEAKA,SAAeD,EAAtB,+CAAO,OAAP,oBAAO,WAA8Be,GAA9B,yFACoBL,IAAAA,IAAA,kCAAqCF,EAArC,kBAAsDO,EAAtD,yBADpB,uBACKd,EADL,EACKA,KADL,kBAEI,CAAEA,KAAAA,IAFN,kEAtBPS,IAAAA,SAAAA,QAAyB,4B","sources":["components/SearchBar.styled.jsx","components/SearchBar.jsx","components/MovieQuery.jsx","pages/MoviesPage/MoviesPage.jsx","services/api.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const SearchForm = styled.form`\n    display: flex;\n    align-items: center;\n    width: 100%;\n    margin: 0;\n`;\n\nexport const Input = styled.input`\n    width: 300px;\n    height: 42px;\n    padding: 5px 10px;\n    border: 2px solid #094067;\n    font-size: 1.2rem;\n    color: #094067;\n    border-radius: 4px;\n    outline: none;\n    box-sizing: border-box;\n    margin-right: 10px;\n\n    &:focus {\n        border: 3px solid #0485e9;\n        color: #0485e9;\n    }\n`;\n\nexport const Button = styled.button`\n    width: 70px;\n    height: 42px;\n    border: 2px solid #094067;\n    background-color: #90b4ce;\n    color: #094067;\n    border-radius: 4px;\n    font-size: 17px;\n    font-weight: bold;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n\n    &:hover {\n        cursor: pointer;\n        border: 3px solid #0485e9;\n        color: #0485e9;\n    }\n`;","import { SearchForm, Input, Button } from \"./SearchBar.styled\";\n\nconst SearchBar = ({ onSubmit }) => {\n    return (\n        <SearchForm onSubmit={onSubmit}>\n            <Input type=\"text\" name=\"searchWord\" placeholder=\"Search your movie\"/>\n            <Button type=\"submit\">Search</Button>\n        </SearchForm>\n    );\n}\n\nexport default SearchBar;","import { Link, useLocation } from 'react-router-dom';\n\nconst MovieQuery = ({ movies }) => {\n\n    const location = useLocation();\n\n    return (\n        <ul>\n            {movies.map(movie => (\n                <li key={movie.id}>\n                    <Link to={`/movies/${movie.id}`} state={{ from: location }}>{movie.title}</Link>\n                </li>\n            ))}\n        </ul>\n    )\n}\n\nexport default MovieQuery;","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { getMoviesQuery } from \"../../services/api\";\nimport SearchBar from \"../../components/SearchBar\";\nimport MovieQuery from \"../../components/MovieQuery\";\n\nconst MoviesPage = () => {\n    const [movies, setMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const searchWord = searchParams.get('searchWord');\n\n    useEffect(() => {\n    if (searchWord) {\n      const fetchMovies = async () => {\n        try {\n          const { data } = await getMoviesQuery(searchWord);\n          setMovies(data.results);\n        } catch (error) {\n        } finally {\n        }\n      };\n      fetchMovies();\n    }\n    }, [searchWord]);\n    \n    const handleSubmit = event => {\n    event.preventDefault();\n\n    setSearchParams({ searchWord: event.target.elements.searchWord.value });\n  };\n\n    return (\n        <div>\n            <SearchBar onSubmit={handleSubmit} />\n            <MovieQuery movies={movies} />\n        </div>\n    )\n}\n\nexport default MoviesPage;","import axios from \"axios\";\n\nconst API_KEY = '2c46f931d1b6ab03af97771e92b1ed3e';\naxios.defaults.baseURL = 'https://api.themoviedb.org';\n\nexport async function getTrendingMovies() {\n    const response = await axios.get(`/3/trending/movie/day?api_key=${API_KEY}`);\n    return response;\n}\n\nexport async function getMovieById(id) {\n    const { data } = await axios.get(`/3/movie/${id}?api_key=${API_KEY}`);\n    return { data };\n}\n\nexport async function getMoviesCast(id) {\n    const { data } = await axios.get(`/3/movie/${id}/credits?api_key=${API_KEY}`);\n    return { data };\n}\n\nexport async function getMoviesReviews(id) {\n    const { data } = await axios.get(`/3/movie/${id}/reviews?api_key=${API_KEY}`);\n    return { data };\n}\n\nexport async function getMoviesQuery(query) {\n    const { data } = await axios.get(`/3/search/movie?api_key=${API_KEY}&query=${query}&include_adult=false`);\n    return { data };\n}"],"names":["SearchForm","styled","Input","Button","onSubmit","type","name","placeholder","movies","location","useLocation","map","movie","to","id","state","from","title","useState","setMovies","useSearchParams","searchParams","setSearchParams","searchWord","get","useEffect","fetchMovies","getMoviesQuery","data","results","event","preventDefault","target","elements","value","API_KEY","getTrendingMovies","axios","response","getMovieById","getMoviesCast","getMoviesReviews","query"],"sourceRoot":""}